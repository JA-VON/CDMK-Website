<?php
/**
 * @file
 * The module file of the PoolParty Semantic Connector for Drupal.
 */

/**
 * Implements hook_permission().
 */
function semantic_connector_permission() {
  return array(
    'administer semantic connector' => array(
      'title' => t('Administer the PoolParty Semantic Connector'),
      'description' => t('Perform administration tasks for the PoolParty Semantic Connector.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function semantic_connector_menu() {
  $items['admin/config/semantic-drupal'] = array(
    'title' => 'Semantic Drupal',
    'description' => 'Configuration of all Semantic Drupal modules and services.',
    'position' => 'left',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/semantic-drupal/semantic-connector'] = array(
    'title' => 'PoolParty Semantic Connector',
    'description' => 'Manage the collaboration of Semantic Drupal modules installed on your site.',
    'page callback' => 'semantic_connector_overview',
    'access arguments' => array('administer semantic connector'),
    'file' => 'includes/semantic_connector.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/semantic-drupal/semantic-connector/connections'] = array(
    'title' => 'Connection Overview',
    'description' => 'Manage the collaboration of Semantic Drupal modules installed on your site',
    'page callback' => 'semantic_connector_overview',
    'access arguments' => array('administer semantic connector'),
    'file' => 'includes/semantic_connector.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/semantic-drupal/semantic-connector/config'] = array(
    'title' => 'Configuration',
    'description' => 'General configuration of the Semantic Connector',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('semantic_connector_configuration_form'),
    'access arguments' => array('administer semantic connector'),
    'file' => 'includes/semantic_connector.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $connection_types = array(
    'pp-server' => 'PoolParty Server',
    'sparql-endpoint' => 'SPARQL Endpoint',
  );

  foreach ($connection_types as $connection_type => $connection_label) {
    $items['admin/config/semantic-drupal/semantic-connector/add-connection/' . $connection_type] = array(
      'title' => 'Add a ' . $connection_label . ' Connection',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('semantic_connector_connection_add_form', 5),
      'access arguments' => array('administer semantic connector'),
      'file' => 'includes/semantic_connector.admin.inc',
      'type' => MENU_LOCAL_ACTION,
    );

    $items['admin/config/semantic-drupal/semantic-connector/connections/' . $connection_type . '/%'] = array(
      'title' => 'Edit a ' . $connection_label . ' Connection',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('semantic_connector_connection_edit_form', 5, 6),
      'access arguments' => array('administer semantic connector'),
      'file' => 'includes/semantic_connector.admin.inc',
      'type' => MENU_CALLBACK,
    );

    $items['admin/config/semantic-drupal/semantic-connector/connections/' . $connection_type . '/%/available'] = array(
      'title' => 'Check if a ' . $connection_label . ' is available',
      'page callback' => '_semantic_connector_connection_available',
      'page arguments' => array(5, 6, 'ajax'),
      'access arguments' => array('administer semantic connector'),
      'type' => MENU_CALLBACK,
    );

    $items['admin/config/semantic-drupal/semantic-connector/connections/' . $connection_type . '/%/delete'] = array(
      'title' => 'Delete a ' . $connection_label . ' Connection',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('semantic_connector_connection_delete_form', 5, 6),
      'access arguments' => array('administer semantic connector'),
      'file' => 'includes/semantic_connector.admin.inc',
      'type' => MENU_CALLBACK,
    );

    $items['admin/config/semantic-drupal/semantic-connector/connections/' . $connection_type . '/%/refresh'] = array(
      'title' => 'Refresh the information of a ' . $connection_label . ' Connection',
      'page callback' => 'semantic_connector_refresh_connection',
      'page arguments' => array(5, 6),
      'access arguments' => array('administer semantic connector'),
      'file' => 'includes/semantic_connector.admin.inc',
      'type' => MENU_CALLBACK,
    );
  }

  return $items;
}

/**
 * Implements hook_theme().
 */
function semantic_connector_theme($existing, $type, $theme, $path) {
  return array(
    'semantic_connector_configuration_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_taxonomy_term_view_alter().
 */
function semantic_connector_taxonomy_term_view_alter(&$build) {
  if (isset($build['#term']->field_uri) && module_exists('powertagging')) {
    drupal_set_title(t('All articles for the topic: @termname', array('@termname' => $build['#term']->name)));

    foreach (powertagging_config_load() as $config) {
      if (isset($config->config['projects'])) {
        if ($config->config['projects'][$config->project_id]['taxonomy_id'] == $build['#term']->vid) {
          $build['semantic_connector_links'] = array(
            '#type' => 'item',
            '#markup' => '<div id="semantic_connector_taxonomy_term_links">' . semantic_connector_theme_concepts(array(
              array(
                'html' => 'Show connected content',
                'uri' => $build['#term']->field_uri[LANGUAGE_NONE][0]['value'],
              )
            ), $config->connection->getId(), $config->project_id, '', array('taxonomy_term_detail_page')) . '</div>',
          );
          break;
        }
      }
    }
  }
}

/**
 * Check if a Semantic Connector connection is available.
 *
 * @param string $connection_type
 *   The type of the connection ("pp_server" or "sparql_endpoint")
 * @param int $connection_id
 *   The ID of the connection
 * @param string $return_type
 *   How to return the value ("ajax" or "boolean")
 *
 * @return bool
 *   TRUE if the connection is available, FALSE if not
 */
function _semantic_connector_connection_available($connection_type, $connection_id, $return_type = 'boolean') {
  $available = FALSE;
  $connection = SemanticConnector::getConnection(str_replace('-', '_', $connection_type), $connection_id);
  if (!is_null($connection)) {
    $available = $connection->available();
  }

  if ($return_type == 'ajax') {
    echo $available ? 1 : 0;
    exit();
  }
  else {
    return $available;
  }
}

/**
 * Get an array of available destinations to go to from a concept link.
 *
 * @return array
 *   The array of destinations keyed by the destination-id, each one is an array
 *   with following keys:
 *   - "weight" --> The weight that defines the order of this destination in the
 *     list of available destinations.
 *   - "label" --> A label describing this destination.
 *   - "list_title" --> The title of the destination for the users in the list
 *     of available destinations.
 *   - "use" --> TRUE if this destination has to be used, FALSE if not.
 */
function _semantic_connector_get_destinations() {
  // An array of available destinations with their default values.
  $available_destinations = array(
    'taxonomy_term_detail_page' => array(
      'weight' => 1,
      'label' => t('Taxonomy Term Detail Page'),
      'list_title' => 'Taxonomy Term Detail Page',
      'use' => FALSE,
    ),
  );
  if (module_exists('smart_glossary')) {
    $available_destinations['smart_glossary_detail_page'] = array(
      'weight' => 0,
      'label' => t('Smart Glossary Detail Page'),
      'list_title' => 'Smart Glossary Detail Page',
      'use' => FALSE,
    );
  }
  if (module_exists('sonr_webmining')) {
    $available_destinations['sonr_webmining'] = array(
      'weight' => 2,
      'label' => t('sOnr Webmining Page'),
      'list_title' => 'sOnr Webmining Page',
      'use' => FALSE,
    );
  }

  // Replace the default values with actual saved values.
  $term_destination_options = variable_get('semantic_connector_term_click_destinations', array());
  foreach ($term_destination_options as $destination_id => $destination) {
    if (isset($available_destinations[$destination_id])) {
      foreach (array_keys($available_destinations[$destination_id]) as $destination_property) {
        if (isset($destination[$destination_property])) {
          $available_destinations[$destination_id][$destination_property] = $destination[$destination_property];
        }
      }
    }
  }

  // Order the destinations by weight.
  uasort($available_destinations, 'drupal_sort_weight');

  return $available_destinations;
}

/**
 * Theme concepts with all their possible destinations.
 *
 * @param array $concepts
 *   An associative array containing following keys:
 *   - "html" --> The HTML of a concept, that will be used as the link text
 *   - "uri" --> The URI of the concept; if the URI is left empty, this item
 *     will be handled as a free term (no linking, but still added to the list)
 * @param int $connection_id
 *   The ID of the Semantic Connector connection.
 * @param string $project_id
 *   The ID of the project this concept is from.
 * @param string $separator
 *   If more than one concept is given, the list of concepts will will be
 *   separated with this string.
 * @param array $ignore_destinations
 *   An array of destination IDs, which should not be displayed.
 *
 * @return string
 *   The themed list of concepts.
 */
function semantic_connector_theme_concepts(array $concepts, $connection_id, $project_id, $separator = ', ', array $ignore_destinations = array()) {
  global $base_path;
  $themed_items = array();
  $destinations = _semantic_connector_get_destinations();

  if (!empty($concepts)) {
    drupal_add_js(drupal_get_path('module', 'semantic_connector') . '/js/semantic_connector.js');
    // Get all URI --> tid connections to avoid lots of database requests.
    $uri_tid_mapping = array();
    if ($destinations['taxonomy_term_detail_page']['use'] && !in_array('taxonomy_term_detail_page', $ignore_destinations)) {
      $uri_tid_mapping = db_select('field_data_field_uri', 'u')
        ->fields('u', array('field_uri_value', 'entity_id'))
        ->condition('u.entity_type', 'taxonomy_term')
        ->execute()
        ->fetchAllKeyed();
    }

    $smart_glossary_destinations = array();
    if ($destinations['smart_glossary_detail_page']['use'] && !in_array('smart_glossary_detail_page', $ignore_destinations)) {
      $pp_server_connection = SemanticConnector::getConnection('pp_server', $connection_id);
      $server_config = $pp_server_connection->getConfig();
      if (isset($server_config['projects']) && !empty($server_config['projects'])) {
        foreach ($server_config['projects'] as $project) {
          if ($project->id == $project_id) {
            if (isset($project->sparql_endpoint_url)) {
              $query = db_select('semantic_connector_connections', 'c')
                ->condition('c.type', 'sparql_endpoint')
                ->condition('c.url', $project->sparql_endpoint_url);
              $query->join('smart_glossary', 'g', 'g.connection_id = c.connection_id');
              $query->fields('g', array('sg_id', 'title', 'base_path', 'language_mapping', 'advanced_settings'));
              $smart_glossary_configs = $query->execute()
                ->fetchAllAssoc('sg_id');

              foreach ($smart_glossary_configs as $smart_glossary_config) {
                $language_mapping = unserialize($smart_glossary_config->language_mapping);
                $advanced_settings = unserialize($smart_glossary_config->advanced_settings);
                //@todo: add multilanguage support.
                if (isset($language_mapping[language_default('language')]) && !empty($language_mapping[language_default('language')]['glossary_languages'][0]) && (!isset($advanced_settings['semantic_connection']['show_in_destinations']) || $advanced_settings['semantic_connection']['show_in_destinations'])) {
                  $smart_glossary_destinations[$smart_glossary_config->base_path . '/' . $language_mapping[language_default('language')]['glossary_languages'][0]] =  $smart_glossary_config->title;
                }
              }
            }
            break;
          }
        }
      }
    }

    $sonr_webmining_destinations = array();
    if ($destinations['sonr_webmining']['use'] && !in_array('sonr_webmining', $ignore_destinations)) {
      global $theme;
      // Get all block paths of sOnr webmining blocks, which use the given
      // connection ID and project ID.
      $query = db_select('sonr_webmining_sets', 's')
        ->fields('s', array('swid', 'title', 'config'))
        ->condition('s.connection_id', $connection_id)
        ->condition('s.project_id', $project_id);
      $query->join('block', 'b', 'b.delta = CONCAT(\'sonr_webmining_content_\', s.swid) AND theme = \'' . $theme . '\'');
      $query->fields('b', array('pages'))
        ->condition('b.visibility', 1);
      $sonr_webmining_configs = $query->execute()
        ->fetchAllAssoc('swid');

      foreach ($sonr_webmining_configs as $sonr_webmining_config) {
        $advanced_settings = unserialize($sonr_webmining_config->config);
        if (!isset($advanced_settings['semantic_connection']['show_in_destinations']) || $advanced_settings['semantic_connection']['show_in_destinations']) {
          // Use the first concrete path of the block.
          $sonr_webmining_block_path_list = explode(PHP_EOL, $sonr_webmining_config->pages);
          foreach ($sonr_webmining_block_path_list as $sonr_webmining_block_path) {
            if (strpos($sonr_webmining_block_path, '*') === FALSE) {
              $sonr_webmining_destinations[($sonr_webmining_block_path == '<front>' ? '' : $sonr_webmining_block_path)] = $sonr_webmining_config->title;
              break;
            }
          }
        }
      }
    }

    foreach ($concepts as $concept) {
      if (!isset($concept['uri']) | !isset($concept['html'])) {
        continue;
      }

      // Free terms.
      if (empty($concept['uri'])) {
        $themed_items[] = $concept['html'];
      }
      // Real concepts.
      else {
        $destination_links = array();
        // Destinations are ordered by weight already, so we don't have to check
        // this property here.
        foreach ($destinations as $destination_id => $destination) {
          if ($destination['use']) {
            switch ($destination_id) {
              case 'taxonomy_term_detail_page':
                if (isset($uri_tid_mapping[$concept['uri']])) {
                  $destination_links['taxonomy/term/' . $uri_tid_mapping[$concept['uri']]] = $destination['list_title'];
                }
                break;
              case 'smart_glossary_detail_page':
                foreach ($smart_glossary_destinations as $smart_glossary_path => $smart_glossary_title) {
                  $destination_links[$smart_glossary_path . '/concept?uri=' . $concept['uri']] = $destination['list_title'] . (count($smart_glossary_destinations) > 1 ? ' (' . $smart_glossary_title . ')' : '');
                }
                break;
              case 'sonr_webmining':
                foreach ($sonr_webmining_destinations as $sonr_webmining_path => $sonr_webmining_title) {
                  $destination_links[$sonr_webmining_path . '?uri=' . $concept['uri']] = $destination['list_title'] . (count($sonr_webmining_destinations) > 1 ? ' (' . $sonr_webmining_title . ')' : '');
                }
                break;
            }
          }
        }

        // Theme the item.
        $themed_item_content = '';
        if (empty($destination_links)) {
          $themed_item_content .= $concept['html'];
        }
        else {
          $themed_item_content .= '<div class="semantic-connector-concept"><ul class="semantic-connector-concept-menu"><li><a class="semantic-connector-concept-link" href="' . $base_path . key($destination_links) . '">' . $concept['html'] . '</a>';
          if (count($destination_links) > 1) {
            $themed_item_content .= '<ul class="semantic-connector-concept-destination-links">';
            foreach ($destination_links as $destination_link_path => $destination_link_label) {
              $themed_item_content .= '<li class="semantic-connector-concept-destination-link"><a href="' . $base_path . $destination_link_path . '">' . $destination_link_label . '</a></li>';
            }
            $themed_item_content .= '</ul>';
          }
          $themed_item_content .= '</li></ul></div>';
        }
        $themed_items[] = $themed_item_content;
      }
    }
  }
  return implode($separator, $themed_items);
}

/**
 * Get detailed information about SPARQL endpoints from a PoolParty server.
 *
 * @param $connection_id
 *   The ID of the SPARQL endpoint connection
 *
 * @return array|bool
 *   Array of information found found for this SPARQL endpoint containing
 *   following keys:
 *   - "pp_connection_id" --> The ID of the corresponding PoolParty server
 *     connection containing the SPARQL endpoint.
 *   - "project_id" --> The ID of the project using the SPARQL endpoint.
 *   or FALSE if no information was found or if this connection does not exist.
 */
function _semantic_connector_get_sparql_connection_details($connection_id) {
  $sparql_connection = SemanticConnector::getConnection('sparql_endpoint', $connection_id);
  if (!is_null($sparql_connection)) {
    $pp_server_connections = SemanticConnector::getConnectionsByType('pp_server');
    foreach ($pp_server_connections as $pp_server_connection) {
      $server_config = $pp_server_connection->getConfig();
      if (isset($server_config['projects']) && !empty($server_config['projects'])) {
        foreach ($server_config['projects'] as $project) {
          if (isset($project->sparql_endpoint_url) && $project->sparql_endpoint_url == $sparql_connection->getUrl()) {
            return array(
              'pp_connection_id' => $pp_server_connection->getId(),
              'project_id' => $project->id,
            );
          }
        }
      }
    }
  }

  return FALSE;
}
